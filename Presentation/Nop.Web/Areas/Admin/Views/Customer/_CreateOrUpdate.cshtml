@model CustomerModel
@inject IEventPublisher eventPublisher

<div asp-validation-summary="All"></div>
<input asp-for="Id" type="hidden" />

<div class="content">
    <div class="form-horizontal">
        <nop-tabs id="customer-edit">
            <nop-tab-header>
                <nop-tab-header-item asp-name="tab-info" asp-default="true">@T("Admin.Customers.Customers.Info")</nop-tab-header-item>
                @if (Model.Id > 0)
                {
                    <nop-tab-header-item asp-name="tab-orders">@T("Admin.Customers.Customers.Orders")</nop-tab-header-item>
                    <nop-tab-header-item asp-name="tab-address">@T("Admin.Customers.Customers.Addresses")</nop-tab-header-item>
                    <nop-tab-header-item asp-name="tab-cart">@T("Admin.Customers.Customers.CurrentShoppingCart")</nop-tab-header-item>
                    <nop-tab-header-item asp-name="tab-wishlist">@T("Admin.Customers.Customers.CurrentWishlist")</nop-tab-header-item>
                    <nop-tab-header-item asp-name="tab-activitylog">@T("Admin.Customers.Customers.ActivityLog")</nop-tab-header-item>
                    <nop-tab-header-item asp-name="tab-impersonate">@T("Admin.Customers.Customers.Impersonate")</nop-tab-header-item>
                    <nop-tab-header-item asp-name="tab-backinstock">@T("Admin.Customers.Customers.BackInStockSubscriptions")</nop-tab-header-item>
                }
                @if (Model.DisplayRewardPointsHistory)
                {
                    <nop-tab-header-item asp-name="tab-rewardpoints">@T("Admin.Customers.Customers.RewardPoints")</nop-tab-header-item>
                }
            </nop-tab-header>
            <nop-tab-content>
                <nop-tab-content-item asp-name="tab-info" asp-default="true">@await Html.PartialAsync("_CreateOrUpdate.Info", Model)</nop-tab-content-item>
                @if (Model.Id > 0)
                {
                    <nop-tab-content-item asp-name="tab-orders">@await Html.PartialAsync("_CreateOrUpdate.Orders", Model)</nop-tab-content-item>
                    <nop-tab-content-item asp-name="tab-address">@await Html.PartialAsync("_CreateOrUpdate.Addresses", Model)</nop-tab-content-item>
                    <nop-tab-content-item asp-name="tab-cart">@await Html.PartialAsync("_CreateOrUpdate.CurrentShoppingCart", Model)</nop-tab-content-item>
                    <nop-tab-content-item asp-name="tab-wishlist">@await Html.PartialAsync("_CreateOrUpdate.CurrentWishlist", Model)</nop-tab-content-item>
                    <nop-tab-content-item asp-name="tab-activitylog">@await Html.PartialAsync("_CreateOrUpdate.ActivityLog", Model)</nop-tab-content-item>
                    <nop-tab-content-item asp-name="tab-impersonate">@await Html.PartialAsync("_CreateOrUpdate.Impersonate", Model)</nop-tab-content-item>
                    <nop-tab-content-item asp-name="tab-backinstock">@await Html.PartialAsync("_CreateOrUpdate.BackInStockSubscriptions", Model)</nop-tab-content-item>
                }
                @if (Model.DisplayRewardPointsHistory)
                {
                    <nop-tab-content-item asp-name="tab-rewardpoints">@await Html.PartialAsync("_CreateOrUpdate.RewardPoints", Model)</nop-tab-content-item>
                }
            </nop-tab-content>
        </nop-tabs>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customer-edit");
    eventPublisher.Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}