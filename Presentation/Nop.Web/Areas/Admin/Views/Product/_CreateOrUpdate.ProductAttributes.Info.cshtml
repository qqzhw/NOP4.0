@using System.Text.Encodings.Web
@using Nop.Core.Domain.Catalog
@using Nop.Services
@model ProductModel

<div class="panel panel-default">
    <div class="panel-body">
        <div id="productattributemappings-grid"></div>
        <script>
    $(document).ready(function() {
        $("#productattributemappings-grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("ProductAttributeMappingList", "Product", new { productId = Model.Id }))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    create: {
                        url: "@Html.Raw(Url.Action("ProductAttributeMappingInsert", "Product", new { productId = Model.Id }))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    update: {
                        url: "@Html.Raw(Url.Action("ProductAttributeMappingUpdate", "Product"))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("ProductAttributeMappingDelete", "Product"))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            ProductAttribute: { editable: true, type: "string" },
                            ProductAttributeId: { editable: true, type: "number" },
                            TextPrompt: { editable: true, type: "string" },
                            IsRequired: { editable: true, type: "boolean" },
                            AttributeControlType: { editable: true, type: "string" },
                            AttributeControlTypeId: { editable: true, type: "number" },
                            //ProductId: { editable: false, type: "number" },
                            DisplayOrder: { editable: true, type: "number" },
                            ShouldHaveValues: { editable: false, type: "boolean" },
                            TotalValues: { editable: false, type: "number" },
                            ValidationRulesAllowed: { editable: false, type: "boolean" },
                            ConditionAllowed: { editable: false, type: "boolean" },
                            Id: { editable: false, type: "number" }
                        }
                    }
                },
                requestEnd: function(e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                },
                error: function(e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                numeric: false,
                previousNext: false,
                info: false,
                @await Html.PartialAsync("_GridPagerMessages")
            },
            toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
            edit: function(e) {
                if (e.model.isNew()) {
                    //little hack here
                    //pre-select the first value of kendoui dropdownlist datasource
                    //for some reasons (maybe, bug) it always sends 0
                    //if no value has been selected (changed) in the dropdownlist
                    if (allProductAttributes.length > 0) {
                        e.model.ProductAttributeId = allProductAttributes[0].Id;
                    }
                    if (allAttributeControlTypes.length > 0) {
                        e.model.AttributeControlTypeId = allAttributeControlTypes[0].Id;
                    }
                }
            },
            editable: {
                confirmation: "@T("Admin.Common.DeleteConfirmation")",
                mode: "inline"
            },
            scrollable: false,
            columns: [
                {
                    field: "ProductAttributeId",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.Attribute")",
                    width: 200,
                    editor: productAttributeDropDownEditor,
                    template: "#:ProductAttribute#"
                }, {
                    field: "TextPrompt",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.TextPrompt")",
                    width: 150
                }, {
                    field: "IsRequired",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.IsRequired")",
                    width: 100,
                    headerAttributes: { style: "text-align:center" },
                    attributes: { style: "text-align:center" },
                    template: '# if(IsRequired) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                },
                {
                    field: "AttributeControlTypeId",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.AttributeControlType")",
                    width: 250,
                    editor: attributeControlTypeDropDownEditor,
                    template: "#:AttributeControlType#"
                },
                {
                    field: "DisplayOrder",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.Fields.DisplayOrder")",
                    width: 150,
                    //integer format
                    format: "{0:0}"
                }, {
                    field: "ShouldHaveValues",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.Values")",
                    width: 150,
                    headerAttributes: { style: "text-align:center" },
                    attributes: { style: "text-align:center" },
                    template: '# if(ShouldHaveValues) {# <a class="btn btn-default" href="@Url.Content("~/Admin/Product/EditAttributeValues/")?productAttributeMappingId=#=Id#">@T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.ViewLink")</a> <div>@T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.TotalValues") #=TotalValues#</div>#}  #'
                },
                {
                    field: "ValidationRulesAllowed",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.ValidationRules")",
                    width: 150,
                    headerAttributes: { style: "text-align:center" },
                    attributes: { style: "text-align:center" },
                    template: "# if(ValidationRulesAllowed) {# <a class=\"btn btn-default\" href='javascript:OpenWindow(\"@Url.Content("~/Admin/Product/ProductAttributeValidationRulesPopup/")#=Id#?btnId=btnRefreshProductAttributes&formId=product-form\", 800, 320, true);'>@T("Admin.Catalog.Products.ProductAttributes.Attributes.ValidationRules.ViewLink")</a> <div>#=ValidationRulesString#</div>#}  #"
                },
                {
                    field: "ConditionAllowed",
                    title: "@T("Admin.Catalog.Products.ProductAttributes.Attributes.Condition")",
                    width: 150,
                    headerAttributes: { style: "text-align:center" },
                    attributes: { style: "text-align:center" },
                    template: "# if(ConditionAllowed) {# <a class=\"btn btn-default\" href='javascript:OpenWindow(\"@Url.Content("~/Admin/Product/ProductAttributeConditionPopup/")?productAttributeMappingId=#=Id#&btnId=btnRefreshProductAttributes&formId=product-form\", 800, 400, true);'>@T("Admin.Catalog.Products.ProductAttributes.Attributes.Condition.ViewLink")</a> <div>#=ConditionString#</div>#}  #"
                },
                {
                    command: [
                        {
                            name: "edit",
                            text: {
                                edit: "@T("Admin.Common.Edit")",
                                update: "@T("Admin.Common.Update")",
                                cancel: "@T("Admin.Common.Cancel")"
                            }
                        }, {
                            name: "destroy",
                            text: "@T("Admin.Common.Delete")"
                        }
                    ],
                    width: 200
                }
            ]
        });
    });

    //local datasource
    var allProductAttributes = [
        @for (int i = 0; i < Model.AvailableProductAttributes.Count; i++)
        {
            var productAttributeItem = Model.AvailableProductAttributes[i];
            <text>
                {
                    Id: @(productAttributeItem.Value),
                    Name: "@(Html.Raw(JavaScriptEncoder.Default.Encode(productAttributeItem.Text)))"
                }
            </text>
            if (i != Model.AvailableProductAttributes.Count - 1)
            {
                <text>,</text>
            }
        }
    ];

    var allAttributeControlTypes = [
        @{
            var allAttributeControlTypes = (from act in AttributeControlType.DropdownList.ToSelectList()
                                            select new
                                            {
                                                Id = act.Value,
                                                Name = act.Text
                                            }).ToList();
        }
        @for (int i = 0; i < allAttributeControlTypes.Count; i++)
        {
            var attributeControlType = allAttributeControlTypes[i];
            <text>
                {
                    Id: @(attributeControlType.Id),
                    Name: "@(Html.Raw(JavaScriptEncoder.Default.Encode(attributeControlType.Name)))"
                }
            </text>
            if (i != allAttributeControlTypes.Count - 1)
            {
                <text>,</text>
            }
        }
    ];

    function productAttributeDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:ProductAttributeId"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allProductAttributes
            });
    }

    function attributeControlTypeDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:AttributeControlTypeId"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allAttributeControlTypes
            });
    }
        </script>
        <input type="submit" id="btnRefreshProductAttributes" style="display: none" />
        <script type="text/javascript">
            $(document).ready(function () {
                $('#btnRefreshProductAttributes').click(function () {
                    //refresh grid
                    var grid = $("#productattributemappings-grid").data('kendoGrid');
                    grid.dataSource.read();

                    //return false to don't reload a page
                    return false;
                });
            });
        </script>
    </div>
</div>